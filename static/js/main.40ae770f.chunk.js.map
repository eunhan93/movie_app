{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","genres","className","MoviePoster","poster","alt","src","title","Movie","synopsis","map","genre","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAiCA,SAASA,EAAT,GAA8B,IAATC,EAAQ,EAARA,OACjB,OACI,0BAAMC,UAAU,gBAAgBD,EAAhC,KAKR,SAASE,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAOA,EAAKE,MAAOF,EAAKH,UAAU,kBAgB7CM,MAnDf,YAAkD,IAAlCD,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQH,EAAkB,EAAlBA,OAAQQ,EAAU,EAAVA,SACnC,OACI,yBAAKP,UAAY,SACb,yBAAKA,UAAY,kBACb,kBAACC,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKL,UAAU,kBACX,4BAAKK,GACL,yBAAKL,UAAU,iBACVD,EAAOS,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAACZ,EAAD,CAAYC,OAAQU,EAAOE,IAAKD,QAElE,yBAAKV,UAAU,mBACf,kBAAC,IAAD,CACIY,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC+BbC,E,4MA5CbC,MAAQ,G,EAKRC,cAAgB,WAYd,OAXe,EAAKD,MAAME,OAAOZ,KAAI,SAAAa,GAEnC,OADAC,QAAQC,IAAIF,EAAMtB,QACX,kBAAC,EAAD,CACHM,MAAOgB,EAAMG,cACbtB,OAAQmB,EAAMI,mBACdd,IAAKU,EAAMK,GACX3B,OAAQsB,EAAMtB,OACdQ,SAAUc,EAAMd,e,EAOxBoB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,2C,EAObS,SAAW,WACT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,kEA7B1BC,KAAKX,e,+BAkCH,OACI,yBAAK3B,UAAasC,KAAKpB,MAAME,OAAS,MAAQ,gBAC3CkB,KAAKpB,MAAME,OAASkB,KAAKnB,gBAAkB,e,GA7CtCoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.40ae770f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './Movie.css';\r\n\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className = \"Movie\">\r\n            <div className = \"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genres={genre} key={index}></MovieGenre>)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction MovieGenre({genres}){\r\n    return (\r\n        <span className=\"Movie__Gerne\">{genres} </span>\r\n    )\r\n}\r\n\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt = {alt} title={alt} className=\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\nclass App extends Component{\n  \n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() -> shouldComponentUpate() -> componentWillUpate() -> render() -> componentDidUpate();\n  // 컴포넌트 안의 state가 바뀔 때마다 render가 일어난다\n\n\n  state = {}\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie.genres);\n      return <Movie \n          title={movie.title_english} \n          poster={movie.medium_cover_image} \n          key={movie.id} \n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        >\n        </Movie>\n    });\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n\n  render(){\n      return(\n          <div className = {this.state.movies ? \"App\" : \"App--loading\"}>\n            {this.state.movies ? this._renderMovies() : 'Loading'}\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}